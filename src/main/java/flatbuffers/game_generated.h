// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_GAME_PROTO_TEST_H_
#define FLATBUFFERS_GENERATED_GAME_PROTO_TEST_H_

#include "flatbuffers/flatbuffers.h"


namespace proto {
namespace test {

struct Shop;
struct Person;
struct Login;

MANUALLY_ALIGNED_STRUCT(8) Shop FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t price_;
  int32_t power_;
  int64_t goodsname_;
  float j_;
  int32_t __padding0;

 public:
  Shop(int32_t price, int32_t power, int64_t goodsname, float j)
    : price_(flatbuffers::EndianScalar(price)), power_(flatbuffers::EndianScalar(power)), goodsname_(flatbuffers::EndianScalar(goodsname)), j_(flatbuffers::EndianScalar(j)), __padding0(0) { (void)__padding0; }

  int32_t price() const { return flatbuffers::EndianScalar(price_); }
  int32_t power() const { return flatbuffers::EndianScalar(power_); }
  int64_t goodsname() const { return flatbuffers::EndianScalar(goodsname_); }
  float j() const { return flatbuffers::EndianScalar(j_); }
};
STRUCT_END(Shop, 24);

struct Person FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t objectID() const { return GetField<int32_t>(4, 2); }
  const flatbuffers::String *username() const { return GetPointer<const flatbuffers::String *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* objectID */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* username */) &&
           verifier.Verify(username()) &&
           verifier.EndTable();
  }
};

struct PersonBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_objectID(int32_t objectID) { fbb_.AddElement<int32_t>(4, objectID, 2); }
  void add_username(flatbuffers::Offset<flatbuffers::String> username) { fbb_.AddOffset(6, username); }
  PersonBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PersonBuilder &operator=(const PersonBuilder &);
  flatbuffers::Offset<Person> Finish() {
    auto o = flatbuffers::Offset<Person>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Person> CreatePerson(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t objectID = 2,
   flatbuffers::Offset<flatbuffers::String> username = 0) {
  PersonBuilder builder_(_fbb);
  builder_.add_username(username);
  builder_.add_objectID(objectID);
  return builder_.Finish();
}

struct Login FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t msgID() const { return GetField<int32_t>(4, 1); }
  const flatbuffers::String *username() const { return GetPointer<const flatbuffers::String *>(6); }
  const Person *person() const { return GetPointer<const Person *>(8); }
  const flatbuffers::Vector<flatbuffers::Offset<Person>> *personArray() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Person>> *>(10); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *nameList() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(12); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* msgID */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* username */) &&
           verifier.Verify(username()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* person */) &&
           verifier.VerifyTable(person()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* personArray */) &&
           verifier.Verify(personArray()) &&
           verifier.VerifyVectorOfTables(personArray()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* nameList */) &&
           verifier.Verify(nameList()) &&
           verifier.VerifyVectorOfStrings(nameList()) &&
           verifier.EndTable();
  }
};

struct LoginBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_msgID(int32_t msgID) { fbb_.AddElement<int32_t>(4, msgID, 1); }
  void add_username(flatbuffers::Offset<flatbuffers::String> username) { fbb_.AddOffset(6, username); }
  void add_person(flatbuffers::Offset<Person> person) { fbb_.AddOffset(8, person); }
  void add_personArray(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Person>>> personArray) { fbb_.AddOffset(10, personArray); }
  void add_nameList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> nameList) { fbb_.AddOffset(12, nameList); }
  LoginBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  LoginBuilder &operator=(const LoginBuilder &);
  flatbuffers::Offset<Login> Finish() {
    auto o = flatbuffers::Offset<Login>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<Login> CreateLogin(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t msgID = 1,
   flatbuffers::Offset<flatbuffers::String> username = 0,
   flatbuffers::Offset<Person> person = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Person>>> personArray = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> nameList = 0) {
  LoginBuilder builder_(_fbb);
  builder_.add_nameList(nameList);
  builder_.add_personArray(personArray);
  builder_.add_person(person);
  builder_.add_username(username);
  builder_.add_msgID(msgID);
  return builder_.Finish();
}
    inline const Login *GetLogin(const void *buf) { return flatbuffers::GetRoot<Login>(buf); }
}  // namespace test
}  // namespace proto

#endif  // FLATBUFFERS_GENERATED_GAME_PROTO_TEST_H_
